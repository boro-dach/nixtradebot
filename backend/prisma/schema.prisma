generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  RU
  ENG
}

model User {
  tgid              String          @id
  language          Language        @default(RU)
  verified          Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  isLucky           Boolean         @default(false)
  isBannedWithdraw  Boolean         @default(false)
  isBannedInBot     Boolean         @default(false)
  stopLimit         Int             @default(0)
  hasStopLimit      Boolean         @default(false)
  
  referralCode      String          @unique @default(cuid()) 
  referredById      String?         
  
  referredBy        User?           @relation("Referrals", fields: [referredById], references: [tgid])
  referrals         User[]          @relation("Referrals") 
  
  trades            Trade[]
  assetBalances     AssetBalance[]
  transactions      Transaction[]
  positions         Position[]
}

model Admin {
  id String @id @default(cuid())
  login String
  password String
}

enum Status {
  PROCESSING
  CONFIRMED
  REJECTED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}

model Transaction {
  id String @id @default(cuid())
  user_id String
  user User @relation(fields: [user_id], references: [tgid])
  type TransactionType
  cryptocurrencyId Int
  currency         Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id])
  amount Decimal
  status Status @default(PROCESSING)
}

model Cryptocurrency {
  id          Int     @id @default(autoincrement())
  coingeckoId String  @unique
  symbol      String  @unique
  name        String
  imageUrl    String?
  assetBalances AssetBalance[]
  transactions  Transaction[]
  positions     Position[]
  fromTrades Trade[] @relation("fromTrades")
  toTrades   Trade[] @relation("toTrades")
}

model AssetBalance {
  id               String @id @default(cuid())
  amount           Decimal @default(0)
  userId           String
  user             User   @relation(fields: [userId], references: [tgid])
  cryptocurrencyId Int
  cryptocurrency   Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id])
  @@unique([userId, cryptocurrencyId])
}

model Trade {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User   @relation(fields: [userId], references: [tgid])
  fromCryptocurrencyId Int
  fromCryptocurrency   Cryptocurrency @relation("fromTrades", fields: [fromCryptocurrencyId], references: [id])
  fromAmount           Decimal
  toCryptocurrencyId Int
  toCryptocurrency   Cryptocurrency @relation("toTrades", fields: [toCryptocurrencyId], references: [id])
  toAmount           Decimal
  executedPrice Decimal
}

model PriceManipulation {
  id         String   @id @default(cuid())
  assetId    String
  multiplier Decimal  @db.Decimal(10, 4)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([assetId, isActive])
}

enum PositionType {
  LONG
  SHORT
}

enum PositionStatus {
  OPEN
  CLOSED
}

model Position {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [tgid])
  cryptocurrencyId  Int
  cryptocurrency    Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id])
  type              PositionType
  status            PositionStatus @default(OPEN)
  entryPrice        Decimal
  amount            Decimal
  investedAmount    Decimal
  currentPrice      Decimal?
  currentValue      Decimal?
  profitLoss        Decimal?
  openedAt          DateTime       @default(now())
  closedAt          DateTime?
  @@index([userId, status])
  @@index([status])
}

model Config {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}