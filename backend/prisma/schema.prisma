// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  RU
  ENG
}

model User {
  tgid String @id

  language Language @default(RU)
  verified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assetBalances AssetBalance[]
  transactions Transaction[]
}

model Admin {
  id String @id @default(cuid())

  login String
  password String
}

enum TransactionCurrency {
  TON
  USDT
  BTC
  ETH
}

enum Status {
  PROCESSING
  CONFIRMED
  REJECTED
}

enum TransationType {
  DEPOSIT
  WITHDRAW
}

model Transaction {
  id String @id @default(cuid())

  user_id String
  user User @relation(fields: [user_id], references: [tgid])

  type TransationType
  cryptocurrencyId Int
  currency         Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id])
  amount Decimal
  status Status @default(PROCESSING)
}

model Cryptocurrency {
  id          Int     @id @default(autoincrement())
  coingeckoId String? @unique // ID с CoinGecko, полезно для интеграции с API
  symbol      String  @unique // Например: "BTC", "ETH", "TON"
  name        String  // Например: "Bitcoin", "Ethereum", "Toncoin"
  imageUrl    String? // Ссылка на иконку

  // Связи для каскадного удаления или отслеживания
  assetBalances AssetBalance[]
  transactions  Transaction[]
}

model AssetBalance {
  id               String @id @default(cuid())
  amount           Decimal @default(0) // Используйте Decimal для денег и крипты во избежание ошибок точности
  
  userId           String
  user             User   @relation(fields: [userId], references: [tgid])
  
  cryptocurrencyId Int
  cryptocurrency   Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id])

  // Гарантирует, что у одного пользователя может быть только одна запись для одной криптовалюты
  @@unique([userId, cryptocurrencyId])
}