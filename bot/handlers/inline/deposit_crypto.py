from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from api.language import get_user_language
from api.transaction import create_transaction  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
from keyboards.inline import get_deposit_crypto_menu
import logging

router = Router()

class DepositTONStates(StatesGroup):
    waiting_for_amount = State()

class DepositUSDTStates(StatesGroup):
    waiting_for_amount = State()

class DepositBTCStates(StatesGroup):
    waiting_for_amount = State()

class DepositETHStates(StatesGroup):
    waiting_for_amount = State()

def get_confirm_button(currency: str, amount: float):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
            callback_data=f"confirm_deposit_{currency.lower()}_{amount}"
        )]
    ])
    return keyboard

@router.callback_query(lambda c: c.data == "crypto")
async def deposit_crypto(callback: types.CallbackQuery):
    user_lang = get_user_language(callback.from_user.id)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è" if user_lang == "ru" else "Choose currency for deposit:"

    keyboard = get_deposit_crypto_menu()
    
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(lambda c: c.data == "deposit_ton")
async def deposit_ton(callback: types.CallbackQuery, state: FSMContext):
    user_lang = get_user_language(callback.from_user.id)
    text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ TON:" if user_lang == "ru" else "Please enter the amount of TON to deposit:"
    
    await callback.message.answer(text)
    await state.set_state(DepositTONStates.waiting_for_amount)
    await callback.answer()

@router.message(StateFilter(DepositTONStates.waiting_for_amount))
async def process_ton_amount(message: types.Message, state: FSMContext):
    user_lang = get_user_language(message.from_user.id)
    
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ." if user_lang == "ru" else "Please enter a valid positive number."
        await message.answer(text)
        return

    deposit_address = "UQAL4wSs8g145h4704Q1to_mPCjCBEZAv0NVsIjmMFODqy8H"

    text = (f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} TON –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:\n\n`{deposit_address}`\n\n"
            f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ."
            if user_lang == "ru" else
            f"Please send {amount} TON to the following address:\n\n`{deposit_address}`\n\n"
            f"After sending, click the confirmation button below.")

    keyboard = get_confirm_button("TON", amount)
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await state.clear()

@router.callback_query(lambda c: c.data == "deposit_usdt")
async def deposit_usdt(callback: types.CallbackQuery, state: FSMContext):
    user_lang = get_user_language(callback.from_user.id)
    text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ USDT TRC20:" if user_lang == "ru" else "Please enter the amount of USDT TRC20 to deposit:"

    await callback.message.answer(text)
    await state.set_state(DepositUSDTStates.waiting_for_amount)
    await callback.answer()

@router.message(StateFilter(DepositUSDTStates.waiting_for_amount))
async def process_usdt_amount(message: types.Message, state: FSMContext):
    user_lang = get_user_language(message.from_user.id)
    
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ." if user_lang == "ru" else "Please enter a valid positive number."
        await message.answer(text)
        return

    deposit_address = "TDKKeUvjmaog2JgFuLD7NqVvrbjnMfu5pF"

    text = (f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} USDT –ø–æ —Å–µ—Ç–∏ TRC20 –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:\n\n`{deposit_address}`\n\n"
            f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ."
            if user_lang == "ru" else
            f"Please send {amount} USDT in TRC20 network to the following address:\n\n`{deposit_address}`\n\n"
            f"After sending, click the confirmation button below.")

    keyboard = get_confirm_button("USDT", amount)
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await state.clear()

@router.callback_query(lambda c: c.data == "deposit_bitcoin")
async def deposit_bitcoin(callback: types.CallbackQuery, state: FSMContext):
    user_lang = get_user_language(callback.from_user.id)
    text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ Bitcoin:" if user_lang == "ru" else "Please enter the amount of Bitcoin to deposit:"
    
    await callback.message.answer(text)
    await state.set_state(DepositBTCStates.waiting_for_amount)
    await callback.answer()

@router.message(StateFilter(DepositBTCStates.waiting_for_amount))
async def process_bitcoin_amount(message: types.Message, state: FSMContext):
    user_lang = get_user_language(message.from_user.id)
    
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ." if user_lang == "ru" else "Please enter a valid positive number."
        await message.answer(text)
        return

    deposit_address = "bc1qaytwrtzttgusr2dph76wz2pjrhzdjqtzz5qk3y"

    text = (f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} Bitcoin –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:\n\n`{deposit_address}`\n\n"
            f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ."
            if user_lang == "ru" else
            f"Please send {amount} Bitcoin to the following address:\n\n`{deposit_address}`\n\n"
            f"After sending, click the confirmation button below.")

    keyboard = get_confirm_button("BTC", amount)
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await state.clear()

@router.callback_query(lambda c: c.data == "deposit_eth")
async def deposit_eth(callback: types.CallbackQuery, state: FSMContext):
    user_lang = get_user_language(callback.from_user.id)
    text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ Ethereum:" if user_lang == "ru" else "Please enter the amount of Ethereum to deposit:"
    
    await callback.message.answer(text)
    await state.set_state(DepositETHStates.waiting_for_amount)
    await callback.answer()

@router.message(StateFilter(DepositETHStates.waiting_for_amount))
async def process_eth_amount(message: types.Message, state: FSMContext):
    user_lang = get_user_language(message.from_user.id)
    
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ." if user_lang == "ru" else "Please enter a valid positive number."
        await message.answer(text)
        return

    deposit_address = "0x61F6C55caAf6D50b4c8764A17916DB6af61079ed"

    text = (f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} Ethereum –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:\n\n`{deposit_address}`\n\n"
            f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ."
            if user_lang == "ru" else
            f"Please send {amount} Ethereum to the following address:\n\n`{deposit_address}`\n\n"
            f"After sending, click the confirmation button below.")

    keyboard = get_confirm_button("ETH", amount)
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π API
@router.callback_query(lambda c: c.data.startswith("confirm_deposit_"))
async def confirm_deposit(callback: types.CallbackQuery):
    user_lang = get_user_language(callback.from_user.id)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data_parts = callback.data.split("_")
        currency = data_parts[2].upper()  # TON, USDT, BTC, ETH
        amount = float(data_parts[3])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_text = (
            "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É..."
            if user_lang == "ru" else
            "‚è≥ Processing your request..."
        )
        await callback.message.edit_text(processing_text)
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ API
        transaction_data = await create_transaction(
            user_id=callback.from_user.id,
            amount=amount,
            currency=currency,
            transaction_type="DEPOSIT"
        )
        
        if transaction_data:
            # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            transaction_id = transaction_data.get("id", "Unknown")
            status = transaction_data.get("status", "PROCESSING")
            
            success_text = (
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} {currency} –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id}`\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n"
                f"–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-30 –º–∏–Ω—É—Ç."
                if user_lang == "ru" else
                f"‚úÖ Your deposit request for {amount} {currency} has been accepted!\n\n"
                f"üÜî Transaction ID: `{transaction_id}`\n"
                f"üìä Status: {status}\n\n"
                f"Funds will be credited to your balance after transaction confirmation.\n"
                f"This usually takes 5-30 minutes."
            )
            
            await callback.message.edit_text(success_text, parse_mode="Markdown")
            await callback.answer(
                "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!" if user_lang == "ru" else "Request accepted!"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            logging.info(
                f"Deposit request created: User {callback.from_user.id}, "
                f"Amount {amount} {currency}, Transaction ID: {transaction_id}"
            )
            
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            error_text = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                if user_lang == "ru" else
                "‚ùå An error occurred while creating the request.\n"
                "Please try again later or contact support."
            )
            
            await callback.message.edit_text(error_text)
            await callback.answer(
                "–û—à–∏–±–∫–∞!" if user_lang == "ru" else "Error!"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logging.error(
                f"Failed to create deposit request: User {callback.from_user.id}, "
                f"Amount {amount} {currency}"
            )
        
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        logging.error(f"Error in confirm_deposit handler: {e}")
        
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            if user_lang == "ru" else
            "‚ùå An unexpected error occurred.\nPlease contact support."
        )
        
        await callback.message.edit_text(error_text)
        await callback.answer(
            "–û—à–∏–±–∫–∞!" if user_lang == "ru" else "Error!"
        )