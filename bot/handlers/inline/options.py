import aiohttp
from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.translations import TEXTS 
from api.language import get_user_language
from typing import Union # 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Union –∏–∑ –º–æ–¥—É–ª—è typing

router = Router()

COINS_LIST = [
    "Bitcoin", "Qtum", "Ethereum", "Tron", "Litecoin", "Ripple",
    "Cardano", "Solana", "Luna", "Doge", "Polkadot", "Avalanche",
    "Uniswap", "Aptos", "Flow", "EOS", "Chainlink", "Quant",
    "Maker", "Trump"
]
COINS_CALLBACK_DATA = [coin.lower() for coin in COINS_LIST]

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å CoinGecko API ---
# 2. –ó–∞–º–µ–Ω—è–µ–º "float | None" –Ω–∞ "Union[float, None]"
async def get_crypto_price(coin_id: str) -> Union[float, None]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ USD —Å –ø–æ–º–æ—â—å—é API CoinGecko.
    """
    if coin_id == "trump":
        coin_id = "maga"
        
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if coin_id in data and 'usd' in data[coin_id]:
                        return data[coin_id]['usd']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –¥–ª—è {coin_id}: {e}")
    return None

def get_coins_menu(lang="ru") -> InlineKeyboardMarkup:
    coins_layout = [
        ["Bitcoin", "Qtum"], ["Ethereum", "Tron"], ["Litecoin", "Ripple"],
        ["Cardano", "Solana"], ["Luna", "Doge"], ["Polkadot", "Avalanche"],
        ["Uniswap", "Aptos"], ["Flow", "EOS"], ["Chainlink", "Quant"],
        ["Maker", "Trump"]
    ]

    keyboard_buttons = []
    for pair in coins_layout:
        row = [InlineKeyboardButton(text=coin, callback_data=coin.lower()) for coin in pair]
        keyboard_buttons.append(row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


@router.message(F.text == "üìä –û–ø—Ü–∏–æ–Ω—ã")
async def options_handler(message: types.Message):
    user_lang = get_user_language(message.from_user.id)
    text = TEXTS[user_lang]["options"]
    keyboard = get_coins_menu(user_lang)
    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)


@router.callback_query(F.data.in_(COINS_CALLBACK_DATA))
async def invest_coin_handler(callback: types.CallbackQuery):
    await callback.answer()

    coin_id = callback.data
    coin_name = coin_id.capitalize()

    price = await get_crypto_price(coin_id)

    if price is not None:
        formatted_price = f"{price:,.2f}$"
        
        text = (
            f"üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ {coin_name}.\n\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 100‚ÇΩ\n"
            f"–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - <b>{formatted_price}</b>\n\n"
            f"–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: 0‚ÇΩ"
        )
    else:
        text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–ª—è {coin_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å", callback_data=f"update_{coin_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_investment")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


@router.callback_query(F.data.startswith("update_"))
async def update_price_handler(callback: types.CallbackQuery):
    await callback.answer(text="–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω!", show_alert=True)

@router.callback_query(F.data == "cancel_investment")
async def cancel_investment_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")