from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from api.user import verify_user, ban_user, set_user_luck, get_user_info, set_withdraw_ban, set_stop_limit, set_stop_limit_amount
import logging

from filters.is_admin import IsAdmin
from keyboards.admin_kb import get_admin_panel_keyboard
from api.balance import get_user_balance, update_asset_balance

router = Router()

class AdminActions(StatesGroup):
    waiting_for_user_id_for_balance = State()
    waiting_for_asset_choice_to_update = State()
    waiting_for_new_balance = State()
    waiting_for_user_id_for_verification = State()
    waiting_for_user_id_for_dialog = State()
    waiting_for_message_for_dialog = State()
    waiting_for_user_id_for_ban = State()
    waiting_for_user_id_for_luck = State()
    waiting_for_user_id_for_withdraw_block = State()
    waiting_for_user_id_for_stop_limit = State()
    waiting_for_user_id_for_stop_limit_amount = State()
    waiting_for_stop_limit_amount = State()


@router.message(Command("admin"), IsAdmin())
async def cmd_admin_panel(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_admin_panel_keyboard()
    )

@router.callback_query(F.data == "admin_stop_limit", IsAdmin())
async def start_stop_limit_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞
    """
    await callback.message.edit_text(
        "‚≠ïÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–æ–º</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–æ–º.\n\n"
        "–ö–æ–≥–¥–∞ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–µ–Ω:\n"
        "‚Ä¢ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è\n"
        "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="HTML"
    )
    await state.set_state(AdminActions.waiting_for_user_id_for_stop_limit)
    await callback.answer()


@router.message(AdminActions.waiting_for_user_id_for_stop_limit, IsAdmin())
async def process_user_id_for_stop_limit(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞
    """
    if not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = int(message.text)
    
    user_info = await get_user_info(user_id)
    
    if user_info is None:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await state.clear()
        return
    
    has_stop_limit = user_info.get('hasStopLimit', False)
    stop_limit_amount = user_info.get('stopLimit', 0)
    
    builder = InlineKeyboardBuilder()
    
    if has_stop_limit:
        builder.row(
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç–æ–ø-–ª–∏–º–∏—Ç",
                callback_data=f"stop_limit_toggle_{user_id}_false"
            )
        )
        status_emoji = "üü¢"
        status_text = "–í–ö–õ–Æ–ß–ï–ù"
    else:
        builder.row(
            types.InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å —Å—Ç–æ–ø-–ª–∏–º–∏—Ç",
                callback_data=f"stop_limit_toggle_{user_id}_true"
            )
        )
        status_emoji = "üî¥"
        status_text = "–í–´–ö–õ–Æ–ß–ï–ù"
    
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main"))
    
    await message.answer(
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ID {user_id}\n\n"
        f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞:</b> {status_text}\n"
        f"üí∞ <b>–°—É–º–º–∞ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞:</b> ${stop_limit_amount}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    await state.clear()


@router.callback_query(F.data.startswith("stop_limit_toggle_"), IsAdmin())
async def process_stop_limit_toggle(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–ª–∞–≥ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    parts = callback.data.split('_')
    user_id = int(parts[3])
    new_status = parts[4] == 'true'
    
    success = await set_stop_limit(user_id, new_status)
    
    if success:
        status = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
        emoji = "üü¢" if new_status else "üî¥"
        
        await callback.answer(f"‚úÖ –°—Ç–æ–ø-–ª–∏–º–∏—Ç {status}!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        user_info = await get_user_info(user_id)
        stop_limit_amount = user_info.get('stopLimit', 0) if user_info else 0
        
        builder = InlineKeyboardBuilder()
        
        if new_status:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç–æ–ø-–ª–∏–º–∏—Ç",
                    callback_data=f"stop_limit_toggle_{user_id}_false"
                )
            )
            status_text = "–í–ö–õ–Æ–ß–ï–ù"
        else:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –í–∫–ª—é—á–∏—Ç—å —Å—Ç–æ–ø-–ª–∏–º–∏—Ç",
                    callback_data=f"stop_limit_toggle_{user_id}_true"
                )
            )
            status_text = "–í–´–ö–õ–Æ–ß–ï–ù"
        
        builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main"))
        
        await callback.message.edit_text(
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ID {user_id}\n\n"
            f"{emoji} <b>–°—Ç–∞—Ç—É—Å —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞:</b> {status_text}\n"
            f"üí∞ <b>–°—É–º–º–∞ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞:</b> ${stop_limit_amount}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    else:
        await callback.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            show_alert=True
        )


@router.callback_query(F.data == "admin_stop_limit_amount", IsAdmin())
async def start_stop_limit_amount_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—É–º–º—ã —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞
    """
    await callback.message.edit_text(
        "üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É–º–º—ã —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="HTML"
    )
    await state.set_state(AdminActions.waiting_for_user_id_for_stop_limit_amount)
    await callback.answer()


@router.message(AdminActions.waiting_for_user_id_for_stop_limit_amount, IsAdmin())
async def process_user_id_for_stop_limit_amount(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∏—Ç—å ID –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—É–º–º—É
    """
    if not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = int(message.text)
    
    user_info = await get_user_info(user_id)
    
    if user_info is None:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await state.clear()
        return
    
    current_limit = user_info.get('stopLimit', 0)
    
    await state.update_data(stop_limit_user_id=user_id)
    
    await message.answer(
        f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞:</b> ${current_limit}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö):",
        parse_mode="HTML"
    )
    await state.set_state(AdminActions.waiting_for_stop_limit_amount)


@router.message(AdminActions.waiting_for_stop_limit_amount, IsAdmin())
async def process_stop_limit_amount(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞
    """
    try:
        amount = float(message.text)
        if amount < 0:
            await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 –∏–ª–∏ 500.50).")
        return

    user_data = await state.get_data()
    user_id = user_data.get('stop_limit_user_id')
    
    success = await set_stop_limit_amount(user_id, int(amount))
    
    if success:
        await message.answer(
            f"‚úÖ –°—É–º–º–∞ —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${amount}"
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
    
    await state.clear()
    await cmd_admin_panel(message)

@router.callback_query(F.data == "admin_verify", IsAdmin())
async def process_verify_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    await state.set_state(AdminActions.waiting_for_user_id_for_verification)
    await callback.answer()

@router.message(AdminActions.waiting_for_user_id_for_verification, IsAdmin())
async def process_user_id_for_verification(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    tgid = int(message.text)

    success = await verify_user(tgid)

    if success:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {tgid} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tgid}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await state.clear()
    await cmd_admin_panel(message)

@router.callback_query(F.data == "admin_balance", IsAdmin())
async def process_balance_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –±–∞–ª–∞–Ω—Å:")
    await state.set_state(AdminActions.waiting_for_user_id_for_balance)
    await callback.answer()

@router.message(AdminActions.waiting_for_user_id_for_balance, IsAdmin())
async def process_user_id_for_balance(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = int(message.text)
    
    balance_data = await get_user_balance(user_id)

    if balance_data is None:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    if not balance_data:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–∞–π–¥–µ–Ω, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        await state.clear()
        return

    response_text = f"–ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
    builder = InlineKeyboardBuilder()

    for asset in balance_data:
        asset_id = asset.get('id')
        crypto_id = asset.get('cryptocurrencyId')
        amount = asset.get('amount')
        
        crypto_name = f"Crypto_{crypto_id}" 
        
        response_text += f"<b>{crypto_name}:</b> <code>{amount}</code>\n"
        builder.row(
            types.InlineKeyboardButton(
                text=f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {crypto_name}", 
                callback_data=f"update_asset_{asset_id}"
            )
        )
    
    response_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /admin –¥–ª—è –≤—ã—Ö–æ–¥–∞."
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main"))
    
    await message.answer(response_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    
    await state.update_data(user_id=user_id)
    await state.set_state(AdminActions.waiting_for_asset_choice_to_update)

@router.callback_query(F.data.startswith("update_asset_"), AdminActions.waiting_for_asset_choice_to_update, IsAdmin())
async def process_asset_choice(callback: CallbackQuery, state: FSMContext):
    asset_balance_id = callback.data.split('_')[-1]
    
    await state.update_data(asset_balance_id_to_update=asset_balance_id)
    
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–∞:")
    await state.set_state(AdminActions.waiting_for_new_balance)
    await callback.answer()


@router.message(AdminActions.waiting_for_new_balance, IsAdmin())
async def process_new_balance(message: Message, state: FSMContext):
    try:
        new_balance = float(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123.45).")
        return

    user_data = await state.get_data()
    asset_balance_id = user_data.get('asset_balance_id_to_update')
    user_id = user_data.get('user_id')

    success = await update_asset_balance(asset_balance_id, new_balance)

    if success:
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")

    await state.clear()
    await cmd_admin_panel(message)

@router.callback_query(F.data == "admin_luck", IsAdmin())
async def process_luck_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        "üçÄ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞—á–µ–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–º —É–¥–∞—á–∏.\n\n"
        "–ö–æ–≥–¥–∞ —Ñ–ª–∞–≥ 'isLucky' –∞–∫—Ç–∏–≤–µ–Ω:\n"
        "‚Ä¢ –¶–µ–Ω—ã –±—É–¥—É—Ç –ø–æ–¥–∫—Ä—É—á–∏–≤–∞—Ç—å—Å—è –≤ –ø–æ–ª—å–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –ï–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–º–∏\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –≤—ã–≥–æ–¥–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="HTML"
    )
    await state.set_state(AdminActions.waiting_for_user_id_for_luck)
    await callback.answer()


@router.message(AdminActions.waiting_for_user_id_for_luck, IsAdmin())
async def process_user_id_for_luck(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–¥–∞—á–∏"""
    if not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = int(message.text)
    
    user_info = await get_user_info(user_id)
    
    if user_info is None:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await state.clear()
        return
    
    is_lucky = user_info.get('isLucky', False)
    username = user_info.get('username', 'Unknown')
    
    builder = InlineKeyboardBuilder()
    
    if is_lucky:
        builder.row(
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–¥–∞—á—É",
                callback_data=f"luck_toggle_{user_id}_false"
            )
        )
        status_emoji = "üü¢"
        status_text = "–í–ö–õ–Æ–ß–ï–ù–ê"
    else:
        builder.row(
            types.InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–¥–∞—á—É",
                callback_data=f"luck_toggle_{user_id}_true"
            )
        )
        status_emoji = "üî¥"
        status_text = "–í–´–ö–õ–Æ–ß–ï–ù–ê"
    
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main"))
    
    await message.answer(
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username} (ID: {user_id})\n\n"
        f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å —É–¥–∞—á–∏:</b> {status_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    await state.clear()


@router.callback_query(F.data.startswith("luck_toggle_"), IsAdmin())
async def process_luck_toggle(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–ª–∞–≥ —É–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    parts = callback.data.split('_')
    user_id = int(parts[2])
    new_luck_status = parts[3] == 'true'
    
    success = await set_user_luck(user_id, new_luck_status)
    
    if success:
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_luck_status else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        emoji = "üü¢" if new_luck_status else "üî¥"
        
        await callback.answer(f"‚úÖ –£–¥–∞—á–∞ {status}!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        user_info = await get_user_info(user_id)
        username = user_info.get('username', 'Unknown') if user_info else 'Unknown'
        
        builder = InlineKeyboardBuilder()
        
        if new_luck_status:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–¥–∞—á—É",
                    callback_data=f"luck_toggle_{user_id}_false"
                )
            )
            status_text = "–í–ö–õ–Æ–ß–ï–ù–ê"
        else:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–¥–∞—á—É",
                    callback_data=f"luck_toggle_{user_id}_true"
                )
            )
            status_text = "–í–´–ö–õ–Æ–ß–ï–ù–ê"
        
        builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main"))
        
        await callback.message.edit_text(
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username} (ID: {user_id})\n\n"
            f"{emoji} <b>–°—Ç–∞—Ç—É—Å —É–¥–∞—á–∏:</b> {status_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    else:
        await callback.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            show_alert=True
        )


@router.callback_query(F.data == "admin_back_to_main", IsAdmin())
async def process_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
        reply_markup=get_admin_panel_keyboard()
    )
    await callback.answer()

@router.message(Command("admin"), IsAdmin())
async def cancel_and_show_panel(message: Message, state: FSMContext):
    await state.clear()
    await cmd_admin_panel(message)

@router.callback_query(F.data == "admin_dialog", IsAdmin())
async def start_dialog_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. "
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(AdminActions.waiting_for_user_id_for_dialog)
    await callback.answer()

@router.message(AdminActions.waiting_for_user_id_for_dialog, IsAdmin())
async def process_user_id_for_dialog(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(dialog_user_id=int(message.text))
    
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {message.text}. "
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(AdminActions.waiting_for_message_for_dialog)

@router.message(AdminActions.waiting_for_message_for_dialog, IsAdmin())
async def process_message_for_dialog(message: Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    user_id_to_send = user_data.get('dialog_user_id')
    
    message_text = message.text
    
    try:
        await bot.send_message(
            chat_id=user_id_to_send,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}"
        )
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_send}.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_send}.\n\n–û—à–∏–±–∫–∞: {e}")
    
    await state.clear()
    
    await cmd_admin_panel(message)


@router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await cmd_admin_panel(message)

@router.callback_query(F.data == "admin_block_bot", IsAdmin())
async def start_ban_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å. "
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(AdminActions.waiting_for_user_id_for_ban)
    await callback.answer()

@router.message(AdminActions.waiting_for_user_id_for_ban, IsAdmin())
async def process_user_id_for_ban(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    tgid = int(message.text)
    
    success = await ban_user(tgid, ban_status=True)
    
    if success:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {tgid} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tgid}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        
    await state.clear()
    await cmd_admin_panel(message)

@router.callback_query(F.data == "admin_block_withdraw", IsAdmin())
async def start_withdraw_block_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∞. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤. "
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID
    await state.set_state(AdminActions.waiting_for_user_id_for_withdraw_block)
    await callback.answer()

@router.message(AdminActions.waiting_for_user_id_for_withdraw_block, IsAdmin())
async def process_user_id_for_withdraw_block(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = int(message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await get_user_info(user_id)
    
    if user_info is None:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    is_banned = user_info.get('isBannedWithdraw', False)
    
    builder = InlineKeyboardBuilder()
    if is_banned:
        builder.row(types.InlineKeyboardButton(
            text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥",
            callback_data=f"withdraw_toggle_{user_id}_false"
        ))
        status_text = "üî¥ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù"
    else:
        builder.row(types.InlineKeyboardButton(
            text="‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥",
            callback_data=f"withdraw_toggle_{user_id}_true"
        ))
        status_text = "üü¢ –ê–ö–¢–ò–í–ï–ù"
        
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))

    await message.answer(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" / "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
@router.callback_query(F.data.startswith("withdraw_toggle_"), IsAdmin())
async def process_withdraw_toggle(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    parts = callback.data.split('_')
    user_id = int(parts[2])
    new_ban_status = parts[3] == 'true'
    
    success = await set_withdraw_ban(user_id, new_ban_status)
    
    if success:
        action_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if new_ban_status else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        await callback.answer(f"‚úÖ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {action_text}.", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        # (—ç—Ç–æ—Ç –∫–æ–¥ –¥—É–±–ª–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI)
        user_info = await get_user_info(user_id)
        if user_info:
            is_banned = user_info.get('isBannedWithdraw', False)
            builder = InlineKeyboardBuilder()
            if is_banned:
                builder.row(types.InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥", callback_data=f"withdraw_toggle_{user_id}_false"))
                status_text = "üî¥ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù"
            else:
                builder.row(types.InlineKeyboardButton(text="‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥", callback_data=f"withdraw_toggle_{user_id}_true"))
                status_text = "üü¢ –ê–ö–¢–ò–í–ï–ù"
            builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))
            await callback.message.edit_text(
                f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∞.", show_alert=True)